import unittest
from Jellybeans.Exceptions.Negativecycle import _Negativecycle

from Jellybeans.Algos import (
    reachability, 
    counting_components, 
    topological_sort, 
    DFS_toposort, 
    count_strong_connected_components, 
    spanning_tree_prim, 
    spanning_tree_kruskal,
    sssp_tree,
    sssp_unweighted,
    sssp_DAG
)
from Jellybeans.Structures import Graph

class test_GraphAlgos(unittest.TestCase):

    def test_reachability1(self):
        g = Graph()
        g.add_vertex(1)
        g.add_vertex(4)
        g.add_vertex(9)
        g.add_edge(1, 4, 5)
        g.add_edge(4, 9, 6)
        g.add_edge(9, 1, 7)
        reachable, path = reachability(g, 4, 1)
        self.assertTrue(reachable)
        self.assertEqual(path, (4, 9, 1))

    def test_reachability2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_edge(0, 1, 5)
        g.add_edge(0, 2, 6)
        g.add_edge(1, 2, 7)
        g.add_edge(1, 3, 8)
        g.add_edge(2, 3, 9)
        reachable, path = reachability(g, 0, 3)
        self.assertTrue(reachable)
        self.assertEqual(path, (0, 1, 3))

    def test_reachability3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_edge(0, 1, 5)
        g.add_edge(0, 2, 6)
        g.add_edge(1, 2, 7)
        g.add_edge(1, 3, 8)
        g.add_edge(2, 3, 9)
        reachable, path = reachability(g, 3, 0)
        self.assertFalse(reachable)
        self.assertIsNone(path)

    def test_components1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        res = counting_components(g)
        self.assertEqual(res, 4)

    def test_components2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_bidirected_edge(0, 1, (5, -5))
        g.add_bidirected_edge(0, 2, (6, -6))
        g.add_bidirected_edge(1, 2, (7, -7))
        g.add_bidirected_edge(1, 3, (8, -8))
        g.add_bidirected_edge(2, 3, (9, -9))
        res = counting_components(g)
        self.assertEqual(res, 1)

    def test_components3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_bidirected_edge(0, 1, (5, -5))
        g.add_bidirected_edge(0, 2, (5, -5))
        g.add_bidirected_edge(1, 2, (5, -5))
        g.add_bidirected_edge(1, 3, (5, -5))
        g.add_bidirected_edge(2, 3, (5, -5))
        g.add_bidirected_edge(3, 4, (5, -5))
        g.add_bidirected_edge(2, 5, (5, -5))
        g.add_bidirected_edge(7, 6, (5, -5))
        res = counting_components(g)
        self.assertEqual(res, 2)

    def test_toposort1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        res = topological_sort(g)
        self.assertEqual(res, [0, 1, 2, 3])

    def test_toposort2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_edge(3, 2)
        g.add_edge(2, 1)
        g.add_edge(1, 0)
        res = topological_sort(g)
        self.assertEqual(res, [3, 2, 1, 0])
    
    def test_toposort3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(0, 3)
        g.add_edge(1, 3)
        g.add_edge(1, 4)
        g.add_edge(2, 4)
        g.add_edge(3, 4)
        res = topological_sort(g)
        self.assertEqual(res, [0, 1, 2, 3, 4])

    def test_DFStoposort1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        res = DFS_toposort(g)
        self.assertEqual(res, [3, 2, 1, 0])

    def test_DFStoposort2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_edge(3, 2)
        g.add_edge(2, 1)
        g.add_edge(1, 0)
        res = DFS_toposort(g)
        self.assertEqual(res, [3, 2, 1, 0])

    def test_DFStoposort3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
        g.add_edge(2, 5)
        g.add_edge(3, 4)
        g.add_edge(7, 6)
        res = DFS_toposort(g)
        self.assertEqual(res, [7, 6, 0, 1, 2, 5, 3, 4])

    def test_SCC1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 4)
        res = count_strong_connected_components(g)
        self.assertEqual(res, 5)

    def test_SCC2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
        res = count_strong_connected_components(g)
        self.assertEqual(res, 3)

    def test_SCC3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_vertex(8)
        g.add_vertex(9)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(1, 3)
        g.add_edge(1, 4)
        g.add_edge(2, 0)
        g.add_edge(3, 6)
        g.add_edge(3, 7)
        g.add_edge(4, 3)
        g.add_edge(4, 5)
        g.add_edge(5, 3)
        g.add_edge(5, 6)
        g.add_edge(6, 4)
        g.add_edge(6, 8)
        g.add_edge(7, 8)
        g.add_edge(7, 9)
        g.add_edge(9, 6)
        g.add_edge(9, 8)
        res = count_strong_connected_components(g)
        self.assertEqual(res, 3)
    
    def test_MST_prim1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (4, 4))
        g.add_bidirected_edge(0, 2, (4, 4))
        g.add_bidirected_edge(0, 3, (6, 6))
        g.add_bidirected_edge(0, 4, (6, 6))
        g.add_bidirected_edge(1, 2, (2, 2))
        g.add_bidirected_edge(2, 3, (8, 8))
        g.add_bidirected_edge(3, 4, (9, 9))
        res = spanning_tree_prim(g, 0, False)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 27)
    
    def test_MST_prim2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (4, 4))
        g.add_bidirected_edge(0, 2, (4, 4))
        g.add_bidirected_edge(0, 3, (6, 6))
        g.add_bidirected_edge(0, 4, (6, 6))
        g.add_bidirected_edge(1, 2, (2, 2))
        g.add_bidirected_edge(2, 3, (8, 8))
        g.add_bidirected_edge(3, 4, (9, 9))
        res = spanning_tree_prim(g, 0, True)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 18)

    def test_MST_prim3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (9, 9))
        g.add_bidirected_edge(0, 2, (75, 75))
        g.add_bidirected_edge(1, 2, (95, 95))
        g.add_bidirected_edge(1, 3, (19, 19))
        g.add_bidirected_edge(1, 4, (42, 42))
        g.add_bidirected_edge(2, 3, (51, 51))
        g.add_bidirected_edge(3, 4, (31, 31))
        res = spanning_tree_prim(g, 0, True)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 110)
    
    def test_MST_prim4(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (9, 9))
        g.add_bidirected_edge(0, 2, (75, 75))
        g.add_bidirected_edge(1, 2, (95, 95))
        g.add_bidirected_edge(1, 3, (19, 19))
        g.add_bidirected_edge(1, 4, (42, 42))
        g.add_bidirected_edge(2, 3, (51, 51))
        g.add_bidirected_edge(3, 4, (31, 31))
        res = spanning_tree_prim(g, 0, False)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 263)

    def test_MST_kruskal1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (4, 4))
        g.add_bidirected_edge(0, 2, (4, 4))
        g.add_bidirected_edge(0, 3, (6, 6))
        g.add_bidirected_edge(0, 4, (6, 6))
        g.add_bidirected_edge(1, 2, (2, 2))
        g.add_bidirected_edge(2, 3, (8, 8))
        g.add_bidirected_edge(3, 4, (9, 9))
        res = spanning_tree_kruskal(g, False)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 27)
    
    def test_MST_kruskal2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (4, 4))
        g.add_bidirected_edge(0, 2, (4, 4))
        g.add_bidirected_edge(0, 3, (6, 6))
        g.add_bidirected_edge(0, 4, (6, 6))
        g.add_bidirected_edge(1, 2, (2, 2))
        g.add_bidirected_edge(2, 3, (8, 8))
        g.add_bidirected_edge(3, 4, (9, 9))
        res = spanning_tree_kruskal(g, True)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 18)

    def test_MST_kruskal3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (9, 9))
        g.add_bidirected_edge(0, 2, (75, 75))
        g.add_bidirected_edge(1, 2, (95, 95))
        g.add_bidirected_edge(1, 3, (19, 19))
        g.add_bidirected_edge(1, 4, (42, 42))
        g.add_bidirected_edge(2, 3, (51, 51))
        g.add_bidirected_edge(3, 4, (31, 31))
        res = spanning_tree_kruskal(g, True)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 110)
    
    def test_MST_kruskal4(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_bidirected_edge(0, 1, (9, 9))
        g.add_bidirected_edge(0, 2, (75, 75))
        g.add_bidirected_edge(1, 2, (95, 95))
        g.add_bidirected_edge(1, 3, (19, 19))
        g.add_bidirected_edge(1, 4, (42, 42))
        g.add_bidirected_edge(2, 3, (51, 51))
        g.add_bidirected_edge(3, 4, (31, 31))
        res = spanning_tree_kruskal(g, False)
        self.assertEqual(sum(map(lambda x: x[2], res.to_edgeList())) / 2, 263)

    def test_sssp_tree1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_bidirected_edge(0, 1, (2, 2))
        g.add_bidirected_edge(1, 2, (3, 3))
        res = sssp_tree(g, 0)
        self.assertEqual(res, {0:0, 1:2, 2:5})

    def test_sssp_tree2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_bidirected_edge(0, 1, (2, 2))
        g.add_bidirected_edge(1, 2, (3, 3))
        with self.assertRaises(TypeError):
            sssp_tree(g, 0)

    def test_sssp_tree3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_bidirected_edge(0, 1, (1, 1))
        g.add_bidirected_edge(1, 2, (2, 2))
        g.add_bidirected_edge(1, 3, (3, 3))
        res = sssp_tree(g, 0)
        self.assertEqual(res, {0:0, 1:1, 2:3, 3:4})

    def test_sssp_tree4(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(5)
        g.add_vertex(100)
        g.add_vertex(120)
        g.add_bidirected_edge(0, 5, (1, 1))
        g.add_bidirected_edge(5, 100, (2, 2))
        g.add_bidirected_edge(5, 120, (3, 3))
        res = sssp_tree(g, 0)
        self.assertEqual(res, {0:0, 5:1, 100:3, 120:4})

    def test_sssp_tree5(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(5)
        g.add_vertex(100)
        g.add_vertex(120)
        g.add_bidirected_edge(0, 5, (-1, -1))
        g.add_bidirected_edge(5, 100, (-2, -2))
        g.add_bidirected_edge(5, 120, (-3, -3))
        with self.assertRaises(_Negativecycle):
            sssp_tree(g, 5)

    def test_sssp_tree6(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(5)
        g.add_vertex(100)
        g.add_vertex(120)
        g.add_bidirected_edge(0, 5, (10, -11))
        g.add_bidirected_edge(5, 100, (2, 2))
        g.add_bidirected_edge(5, 120, (3, 3))
        with self.assertRaises(_Negativecycle):
            sssp_tree(g, 0)

    def test_sssp_tree7(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_bidirected_edge(0, 5, (4, 4))
        g.add_bidirected_edge(0, 1, (2, 2))
        g.add_bidirected_edge(1, 3, (9, 9))
        g.add_bidirected_edge(3, 4, (1, 1))
        g.add_bidirected_edge(3, 2, (5, 5))
        res = sssp_tree(g, 0)
        self.assertEqual(res, {0:0, 1:2, 2:16, 3:11, 4:12, 5:4})

    def test_sssp_tree8(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_bidirected_edge(0, 5, (4, 4))
        g.add_bidirected_edge(0, 1, (2, 2))
        g.add_bidirected_edge(1, 3, (9, 9))
        g.add_bidirected_edge(3, 4, (1, 1))
        g.add_bidirected_edge(3, 2, (5, 5))
        res = sssp_tree(g, 3)
        self.assertEqual(res, {0:11, 1:9, 2:5, 3:0, 4:1, 5:15})

    def test_sssp_tree9(self):
        g = Graph()
        g.add_vertex(0)
        res = sssp_tree(g, 0)
        self.assertEqual(res, {0:0})

    def test_sssp_tree10(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_bidirected_edge(0, 1, (3, -3))
        res = sssp_tree(g, 0)
        self.assertEqual(res, {0:0, 1:3})

    def test_sssp_unweighted1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_bidirected_edge(0, 1, (3, -3))
        with self.assertRaises(TypeError):
            sssp_unweighted(g, 0)

    def test_sssp_unweighted2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(1, 5)
        g.add_edge(2, 4)
        g.add_edge(3, 5)
        g.add_edge(4, 0)
        g.add_edge(4, 3)
        res = sssp_unweighted(g, 3)
        self.assertEqual(res, {0:1000000000, 1:1000000000, 2:1000000000, 3:0, 4:1000000000, 5:1})

    def test_sssp_unweighted3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(1, 5)
        g.add_edge(2, 4)
        g.add_edge(3, 5)
        g.add_edge(4, 0)
        g.add_edge(4, 3)
        res = sssp_unweighted(g, 0)
        self.assertEqual(res, {0:0, 1:1, 2:1, 3:2, 4:2, 5:2})

    def test_sssp_unweighted4(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_bidirected_edge(0, 1, (-1, -1))
        with self.assertRaises(_Negativecycle):
            sssp_unweighted(g, 0)

    def test_sssp_unweighted5(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_bidirected_edge(0, 1, (-3, -1))
        with self.assertRaises(TypeError):
            sssp_unweighted(g, 0)

    def test_sssp_unweighted6(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_vertex(8)
        g.add_vertex(9)
        g.add_vertex(10)
        g.add_vertex(11)
        g.add_vertex(12)
        g.add_bidirected_edge(0, 1)
        g.add_bidirected_edge(0, 4)
        g.add_bidirected_edge(1, 2)
        g.add_bidirected_edge(1, 5)
        g.add_bidirected_edge(2, 3)
        g.add_bidirected_edge(2, 6)
        g.add_bidirected_edge(3, 7)
        g.add_bidirected_edge(4, 8)
        g.add_bidirected_edge(5, 6)
        g.add_bidirected_edge(5, 10)
        g.add_bidirected_edge(6, 11)
        g.add_bidirected_edge(7, 12)
        g.add_bidirected_edge(8, 9)
        g.add_bidirected_edge(9, 10)
        g.add_bidirected_edge(10, 11)
        g.add_bidirected_edge(11, 12)
        res = sssp_unweighted(g, 10)
        self.assertEqual(res, {0:3, 1:2, 2:3, 3:4, 4:3, 5:1, 6:2, 7:3, 8:2, 9:1, 10:0, 11:1, 12:2})

    def test_sssp_unweighted7(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_vertex(8)
        g.add_vertex(9)
        g.add_edge(0, 1, 4)
        g.add_edge(0, 2, 4)
        g.add_edge(1, 3, 4)
        g.add_edge(1, 4, 4)
        g.add_edge(2, 1, 4)
        g.add_edge(2, 5, 4)
        g.add_edge(3, 6, 4)
        g.add_edge(3, 7, 4)
        g.add_edge(4, 2, 4)
        g.add_edge(4, 3, 4)
        g.add_edge(4, 7, 4)
        g.add_edge(4, 8, 4)
        g.add_edge(5, 4, 4)
        g.add_edge(5, 8, 4)
        g.add_edge(6, 7, 4)
        g.add_edge(7, 8, 4)
        g.add_edge(8, 9, 4)
        g.add_edge(9, 5, 4)
        res = sssp_unweighted(g, 4)
        self.assertEqual(res, {0:1000000000, 1:8, 2:4, 3:4, 4:0, 5:8, 6:8, 7:4, 8:4, 9:8})

    def test_sssp_unweighted8(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_vertex(8)
        g.add_vertex(9)
        g.add_edge(0, 1, 4)
        g.add_edge(0, 2, 4)
        g.add_edge(1, 3, 4)
        g.add_edge(1, 4, 4)
        g.add_edge(2, 1, 4)
        g.add_edge(2, 5, 4)
        g.add_edge(3, 6, 4)
        g.add_edge(3, 7, 4)
        g.add_edge(4, 2, 2)
        g.add_edge(4, 3, 4)
        g.add_edge(4, 7, 4)
        g.add_edge(4, 8, 4)
        g.add_edge(5, 4, 4)
        g.add_edge(5, 8, 4)
        g.add_edge(6, 7, 4)
        g.add_edge(7, 8, 4)
        g.add_edge(8, 9, 4)
        g.add_edge(9, 5, 4)
        with self.assertRaises(TypeError):
            sssp_unweighted(g, 0)

    def test_sssp_DAG1(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_edge(1, 0, 10)
        g.add_edge(2, 0, 20)
        res = sssp_DAG(g, 1)
        self.assertEqual(res, {0:10, 1:0, 2:1000000000})

    def test_sssp_DAG2(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_bidirected_edge(1, 0, (10, 10))
        g.add_bidirected_edge(2, 0, (20, 20))
        with self.assertRaises(TypeError):
            sssp_DAG(g, 1)

    def test_sssp_DAG3(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_edge(0, 2, 6)
        g.add_edge(0, 1, 2)
        g.add_edge(0, 3, 7)
        g.add_edge(1, 3, 3)
        g.add_edge(1, 4, 6)
        g.add_edge(2, 4, 1)
        g.add_edge(3, 4, 5)
        res = sssp_DAG(g, 1)
        self.assertEqual(res, {0:1000000000, 1:0, 2:1000000000, 3:3, 4:6})

    def test_sssp_DAG4(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_edge(0, 2, 6)
        g.add_edge(0, 1, 2)
        g.add_edge(0, 3, 7)
        g.add_edge(1, 3, 3)
        g.add_edge(1, 4, 6)
        g.add_edge(2, 4, 1)
        g.add_edge(3, 4, 5)
        res = sssp_DAG(g, 0)
        self.assertEqual(res, {0:0, 1:2, 2:6, 3:5, 4:7})

    def test_sssp_DAG5(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_edge(0, 1, 1)
        g.add_edge(0, 2, 10)
        g.add_edge(1, 3, 2)
        g.add_edge(2, 3, -10)
        g.add_edge(3, 4, 3)
        res = sssp_DAG(g, 0)
        self.assertEqual(res, {0:0, 1:1, 2:10, 3:0, 4:3})

    def test_sssp_DAG6(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_vertex(7)
        g.add_vertex(8)
        g.add_vertex(9)
        g.add_edge(0, 1, 4)
        g.add_edge(0, 2, 4)
        g.add_edge(1, 3, 4)
        g.add_edge(1, 4, 4)
        g.add_edge(2, 1, 4)
        g.add_edge(2, 5, 4)
        g.add_edge(3, 6, 4)
        g.add_edge(3, 7, 4)
        g.add_edge(4, 2, 2)
        g.add_edge(4, 3, 4)
        g.add_edge(4, 7, 4)
        g.add_edge(4, 8, 4)
        g.add_edge(5, 4, 4)
        g.add_edge(5, 8, 4)
        g.add_edge(6, 7, 4)
        g.add_edge(7, 8, 4)
        g.add_edge(8, 9, 4)
        g.add_edge(9, 5, 4)
        with self.assertRaises(TypeError):
            sssp_DAG(g, 0)

    def test_sssp_DAG7(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_edge(0, 1, 4)
        g.add_edge(0, 2, 8)
        g.add_bidirected_edge(1, 2)
        g.add_edge(1, 3, 8)
        g.add_edge(2, 3, 3)
        with self.assertRaises(TypeError):
            sssp_DAG(g, 0)

    def test_sssp_DAG8(self):
        g = Graph()
        g.add_vertex(0)
        g.add_vertex(1)
        g.add_vertex(2)
        g.add_vertex(3)
        g.add_vertex(4)
        g.add_vertex(5)
        g.add_vertex(6)
        g.add_edge(0, 1, 6)
        g.add_edge(1, 2, 5)
        g.add_edge(2, 3, 4)
        g.add_edge(3, 4, 3)
        g.add_edge(4, 5, 2)
        g.add_edge(5, 6, 1)
        res = sssp_DAG(g, 0)
        self.assertEqual(res, {0:0, 1:6, 2:11, 3:15, 4:18, 5:20, 6:21})